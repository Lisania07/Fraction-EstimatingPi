#BlueJ class context
comment0.target=Fraction
comment1.params=
comment1.target=Fraction()
comment1.text=\n\ Default\ constructor\n\ A\ Fraction\ object\ with\ randomly\ declared\ initial\ value\n
comment10.params=a\ b
comment10.target=int\ gcd(int,\ int)
comment10.text=\n\ Greatest\ Common\ Factor\ Method\ \n\ @param\ int\ a,\ any\ possible\ number\ in\ int\ format.\n\ @param\ int\ b,\ any\ possible\ number\ in\ int\ format.\n\ Method\ to\ find\ the\ greatest\ common\ factor\ of\ two\ numbers\ in\ int\ format.\n
comment11.params=
comment11.target=void\ reduce()
comment11.text=\nMethod\ for\ reducing\ the\ Fraction\ object\ to\ lowest\ terms.\ \ \n
comment12.params=num
comment12.target=void\ setNumerator(int)
comment12.text=\nMethod\ for\ changing\ the\ values\ of\ the\ numerator.\n
comment13.params=denom
comment13.target=void\ setDenominator(int)
comment13.text=\n\ Method\ for\ changing\ the\ values\ of\ the\ denominator\n
comment14.params=a\ b
comment14.target=int\ findGcf(int,\ int)
comment15.params=n\ d
comment15.target=Fraction\ multiply(Fraction,\ Fraction)
comment15.text=\n\ Method\ for\ returning\ a\ new\ Fraction\ object\ that\ applies\ substraction\ operation\ of\ two\ Fraction\ objects.\n\ @param\ Fraction\ n,\ the\ fraction\ object\ to\ be\ multiplied.\n\ @param\ Fraction\ d,\ the\ fraction\ object\ to\ be\ multiplied.\n
comment16.params=n\ d
comment16.target=Fraction\ divide(Fraction,\ Fraction)
comment16.text=\n\ Method\ for\ returning\ a\ new\ Fraction\ object\ that\ applies\ division\ operation\ of\ two\ Fraction\ objects.\n\ @param\ Fraction\ n,\ the\ fraction\ object\ as\ a\ dividend.\n\ @param\ Fraction\ d,\ the\ fraction\ object\ as\ a\ divisor.\n
comment17.params=n\ d
comment17.target=Fraction\ add(Fraction,\ Fraction)
comment17.text=\n\ Method\ for\ returning\ a\ new\ Fraction\ object\ that\ applies\ addition\ operation\ of\ two\ Fraction\ objects.\n\ @param\ Fraction\ n,\ the\ fraction\ object\ to\ be\ added\ with\ Fraction\ d.\n\ @param\ Fraction\ d,\ the\ fraction\ object\ to\ be\ added\ with\ Fraction\ n.\n
comment18.params=n\ d
comment18.target=Fraction\ subtract(Fraction,\ Fraction)
comment18.text=\n\ Method\ for\ returning\ a\ new\ Fraction\ object\ that\ applies\ subtraction\ operation\ of\ two\ Fraction\ objects.\n\ @param\ Fraction\ n,\ the\ fraction\ object\ as\ a\ minuend.\n\ @param\ Fraction\ d,\ the\ fraction\ object\ as\ a\ subtrahend.\n
comment19.params=f
comment19.target=boolean\ equals(Fraction)
comment2.params=numeratorValue\ denominatorValue
comment2.target=Fraction(int,\ int)
comment2.text=\n\ Parameterized\ constructor\n\ @param\ numeratorValue,the\ desired\ numerator.\n\ @param\ denominatorValue,\ the\ desired\ denominator.\n\ A\ Fraction\ object\ takes\ two\ int\ parameters.\n
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment3.params=frac
comment3.target=Fraction(java.lang.String)
comment3.text=\n\ Fraction\ constructor\n\ A\ fraction\ object\ that\ represents\ a\ fraction\ using\ a\ forward\ slash\ character.\n\ @param\ farc,\ the\ fracrtion\ in\ string\ format.\n
comment4.params=frac
comment4.target=Fraction(Fraction)
comment4.text=\n\ Copy\ ocnstructor\n\ @param\ frac,\ the\ fraction\ object\ to\ copy.\n\ A\ fraction\ object\ that\ creates\ a\ new\ fraction\ that\ has\ the\ same\ numerator\ and\ denominator.\n
comment5.params=
comment5.target=void\ fixDenominator()
comment5.text=\n\ Method\ for\ limiting\ the\ denominator\ to\ a\ non-zero\ number.\n
comment6.params=
comment6.target=int\ getNumerator()
comment6.text=\n\ Method\ to\ return\ a\ numerator\ in\ int\ format.\n
comment7.params=
comment7.target=int\ getDenominator()
comment7.text=\n\ Method\ to\ return\ an\ denominator\ in\ int\ format.\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\n\ Method\ to\ return\ a\ fraction\ in\ string\ format.\n
comment9.params=
comment9.target=double\ toDouble()
comment9.text=\n\ Method\ to\ return\ an\ fraction\ in\ double\ format.\n
numComments=21
